<script>
  class TickerMessage extends HTMLElement {
    constructor() {
      super();
      this.tickerText = null;
    }

    connectedCallback() {

      this.speed = this.getAttribute("speed")
      this.content = this.getAttribute("content")

      this.render();

      this.addEventListener("mouseover", this.startTicker);
      this.addEventListener("mouseout", this.resetTicker);
      // this.startTicker();
    }

    render() {
      this.innerHTML = `<div class="ticker-text">${this.content}</div>`;
      this.tickerText = this.querySelector(".ticker-text");
    }

    startTicker() {
      console.log(this.content)
      let totalWidth = this.tickerText.offsetWidth;
      let animationCSS = `
            @keyframes ticker {
                0% { transform: translateX(0); }
                100% { transform: translateX(-${totalWidth}px); }
            }
        `;

      let styleElement = document.createElement("style");
      styleElement.innerHTML = animationCSS;
      document.head.appendChild(styleElement);

      let duration = (totalWidth / this.speed) * 1000;
      this.tickerText.style.animation = `ticker ${duration}ms linear`;
    }
    resetTicker() {
      this.tickerText.style.animation = "none";

      // This forces a reflow, which is necessary to restart the animation
      void this.tickerText.offsetWidth;
    }
  }

  customElements.define("ticker-message", TickerMessage);
</script>

<style>
  ticker-message {
    display: block;
    width: 100%;
    overflow: hidden;
    white-space: nowrap;
    position: relative;
    background: #f0f0f0;
    height: 100%;
  }

  .ticker-text {
    display: inline-block;
    white-space: nowrap;
    position: absolute;
    right: 0;
    animation-iteration-count: infinite;
  }
</style>